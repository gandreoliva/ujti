load("symbolic/potential_def.mac")$

/*

Quevedo-Mashhoon metric

q = qFrutos/((sigma**2/m**2)**(3/2d0)*m**3)*15/2d0
a = aFrutos


((maxima metric)) --> make_ujti.sh --> ray-tracing applications
Run as: maxima -b metric-name.mac
*/


x: (r - m)/sigma$
y: cos(th)$
Delta: r**2 - 2*m*r + a**2$
rho2: r**2 + (a*y)**2$

P0: 1$
P1: y$
P2: (3*y**2 - P0)/2$
Q0: ratsimp( - (1/2)*log((x - 1)/(x + 1)) )$
Q1: ratsimp(x*Q0 - 1)$
Q2: ratsimp((3*x*Q1 - Q0)/2)$
Q2p : (- 3*Q0*x*(1 - x**2) + (- 3*x**2 + 2))/(x**2 - 1)$

deltaplus: ratsimp((1/2)*log((x + y)**2/(x**2 - 1)) + (P2 - P0)*Q1 + P1*(Q2 - Q0))$
deltaminus: ratsimp((1/2)*log((x - y)**2/(x**2 - 1)) + (P2 - P0)*Q1 - P1*(Q2 - Q0))$


lambda1: alpha*exp(2*q*deltaplus)$
lambda2: alpha*exp(2*q*deltaminus)$

aplus: x*(1 - lambda1*lambda2) + (1 + lambda1*lambda2)$
aminus: x*(1 - lambda1*lambda2) - (1 + lambda1*lambda2)$
bplus: y*(lambda1 + lambda2) - (lambda1 - lambda2)$
bminus: y*(lambda1 + lambda2) + (lambda1 - lambda2)$

RR: aplus*aminus + bplus*bminus$
LL: aplus**2 + bplus**2$
MM: x*(1 - y**2)*(lambda1 + lambda2)*aplus + y*(x**2 - 1)*(1 - lambda1*lambda2)*bplus$


chi: (1/2)*(1+q)^2*log((x^2-1)/(x^2-y^2))
    + 2*q*(P0 - P2)*Q1 + (1/2)*q^2*(P0 - P2)*(2*(P0 + P2)*(Q1^2 - Q2^2)
    + (x^2 - 1)*(2*Q2^2 + 3*(Q0 - x*Q1)*Q2 - Q2p))$

/*
< 09.09.2019
chi: (1/2)*(1+q)^2*log((x^2-1)/(x^2-y^2))
    + 2*q*(1-P2)*Q1 + 1/2*q^2*(1-P2)*( 2*(1+P2)*(Q1^2 - Q2^2)
    + (x^2-1)*(2*Q2^2 - 3*x*Q1*Q2 + 3*Q0*Q2 - Q2p) )$

 < 01.09.2019
 chi: (1/2)*(1+q)^2*log((x^2-1)/(x^2-y^2))
    + 2*q*(1-P2)*Q1 + 1/2*q^2*(1-P2)*( 2*(1+P2)*(Q1^2+Q2^2)
    + (x^2-1)*(2*Q2^2-3*x*Q1*Q2+3*Q0*Q2-Q2p) )
chi: (1/2)*(1 + q)**2*log((x**2 - 1)/(x**2 - y**2)) + 2*q*(P0 - P1)*Q1
    + (1/2)*q**2*(P0 - P2)*(2*(P0 + P2)*(Q1**2 - Q2**2) + (x**2 - 1)*(2*Q2**2 + 3*(Q0 - x*Q1)*Q2 - Q2p))$
*/

psi: q*P2*Q2$ /* 09.09.2019: added - */

omega : 2*(a + sigma*(MM/RR)*exp(2*psi))$

/* old >> e2gamma: (1/4)*(1 + m/sigma)**2*(RR/Delta)*exp(2*chi)$ */
e2gamma: (1/4)*(sigma + m)**2*(RR/Delta)*exp(2*chi)$


f: (RR/LL)*exp(- 2*psi)$

pv: f$
pw: pv*omega$
px: (e2gamma/pv)*((x**2 - y**2)/(x**2 - 1))$
py: sigma**2*e2gamma*(x**2 - y**2)/pv$
pz: sigma**2*(x**2 - 1)*(1 - y**2)/pv - pv*omega**2$

metric_parameters: [m,a,q,sigma,alpha]$
metric_name: "qm"$

dir: "gensrc/"$

write_pot_fortran()$
